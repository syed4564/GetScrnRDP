name: Screen Igor

on:
  workflow_dispatch:

jobs:
  build:
    name: Start Remote Desktop with Software, VPN, Audio, and Loop
    runs-on: windows-latest

    steps:
      - name: Install GetScreen.me
        run: |
          Write-Output "üì• Downloading GetScreen.me..."
          $url = "https://getscreen.me/download/getscreen.msi"
          $msiPath = "$env:TEMP\\getscreen.msi"
          Invoke-WebRequest -Uri $url -OutFile $msiPath

          Write-Output "üì¶ Installing GetScreen.me..."
          Start-Process msiexec.exe -ArgumentList "/i `"$msiPath`" /qn /norestart" -Wait
          
          $exePath = "${env:ProgramFiles}\\GetScreen.me\\getscreen.exe"
          if (Test-Path $exePath) {
            Write-Output "üîë Registering GetScreen.me with email..."
            Start-Process -FilePath $exePath -ArgumentList "-install -register igor92568575@gmail.com -hidden -no-gui"
            Start-Sleep -Seconds 10
            Start-Service -Name "GetScreen" -ErrorAction SilentlyContinue
            Set-Service -Name "GetScreen" -StartupType Automatic -ErrorAction SilentlyContinue
            Write-Output "‚úÖ GetScreen.me installed and registered successfully."
          } else {
            Write-Error "‚ùå Getscreen.exe not found after install!"
          }

      - name: Set Screen Resolution to 1366x768
        shell: cmd
        run: |
          @echo off
          set "nircmd_zip=%TEMP%\nircmd.zip"
          set "nircmd_dir=%TEMP%\nircmd"
          set "nircmd_exe=%nircmd_dir%\nircmd.exe"
          echo Downloading NirCmd...
          curl -L -o "%nircmd_zip%" "https://www.nirsoft.net/utils/nircmd.zip"
          echo Extracting NirCmd...
          powershell -Command "Expand-Archive -Path '%nircmd_zip%' -DestinationPath '%nircmd_dir%' -Force"
          if exist "%nircmd_exe%" (
              echo Setting resolution to 1366x768...
              "%nircmd_exe%" setdisplay 1366 768 32
              echo ‚úÖ Resolution changed successfully.
          ) else (
              echo ‚ùå NirCmd executable not found.
          )

      - name: Software Installation (WinRAR + IDM + Tor Browser)
        run: |
          # Install WinRAR
          $winrarUrl = "https://www.rarlab.com/rar/winrar-x64-712.exe"
          $winrarPath = "$env:TEMP\\winrar-x64-712.exe"
          Invoke-WebRequest -Uri $winrarUrl -OutFile $winrarPath
          Start-Process -FilePath $winrarPath -ArgumentList "/S" -Wait
          Write-Output "‚úÖ WinRAR installed."

          # Install IDM
          $idmUrl = "https://mirror2.internetdownloadmanager.com/idman642build41.exe"
          $idmPath = "$env:TEMP\\idm_setup.exe"
          Invoke-WebRequest -Uri $idmUrl -OutFile $idmPath
          if (Test-Path $idmPath) {
            Start-Process -FilePath $idmPath -ArgumentList "/skipdlgs" -Wait
            Write-Output "‚úÖ IDM installed."
          } else {
            Write-Error "‚ùå IDM download failed."
          }

          # Tor Browser
          $dropboxUrl = "https://www.dropbox.com/scl/fi/faraacel5x4ssj5clo2j1/Browser.zip?rlkey=81rsd6nbwk2p95e0t3mpcirfi&st=3pnv7hia&dl=1"
          $zipPath = "$env:TEMP\\browser.zip"
          $extractPath = "$env:USERPROFILE\\browser"
          Invoke-WebRequest -Uri $dropboxUrl -OutFile $zipPath
          if (Test-Path $zipPath) {
            Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
            Write-Output "‚úÖ Browser.zip extracted."
          }

          $firefox = "$extractPath\\Browser\\firefox.exe"
          $shortcut = "$env:USERPROFILE\\Desktop\\Tor.lnk"
          if (Test-Path $firefox) {
            $shell = New-Object -ComObject WScript.Shell
            $s = $shell.CreateShortcut($shortcut)
            $s.TargetPath = $firefox
            $s.WorkingDirectory = "$extractPath\\Browser"
            $s.IconLocation = "$firefox,0"
            $s.Save()
            Write-Output "‚úÖ Tor Browser shortcut created."
          }

      - name: Install VPN Gate (via install_vpngate.bat)
        run: |
          $vpnURL = "https://www.dropbox.com/scl/fo/a6c0sqactnwr26cbbv1uc/APO1J80osQpo_8EoBOU3eJA?rlkey=s7wgg6ieuhlkr7wlxa9j9yij6&dl=1"
          $zipPath = "$env:TEMP\\vpn_bundle.zip"
          $extractPath = "$env:USERPROFILE\\Desktop\\vpn_bundle"
          $batPath = "$extractPath\\install_vpngate.bat"
          $vpnCheck = "C:\\Program Files\\SoftEther VPN Client\\vpncmgr.exe"
          Write-Output "üì• Downloading VPN bundle..."
          Invoke-WebRequest -Uri $vpnURL -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          if (-Not (Test-Path $batPath)) { Write-Error "‚ùå install_vpngate.bat not found!"; exit 1 }
          Start-Process -FilePath "cmd.exe" -ArgumentList "/c `"$batPath`"" -WorkingDirectory $extractPath
          $maxWait = 300; $interval = 5; $elapsed = 0
          while (-not (Test-Path $vpnCheck) -and ($elapsed -lt $maxWait)) {
              Start-Sleep -Seconds $interval; $elapsed += $interval
              Write-Output "üîÅ Checking... $elapsed sec"
          }
          if (Test-Path $vpnCheck) { Write-Output "‚úÖ VPN Gate installed." } else { Write-Error "‚ùå VPN Gate timed out."; exit 1 }

      - name: Install VB-CABLE Virtual Audio Driver
        run: |
          $zip = "$env:TEMP\\VBCABLE.zip"
          $extract = "$env:TEMP\\VBCABLE"
          $url = "https://download.vb-audio.com/Download_CABLE/VBCABLE_Driver_Pack43.zip"
          Invoke-WebRequest -Uri $url -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath $extract
          $setup = "$extract\\VBCABLE_Setup_x64.exe"
          if (Test-Path $setup) {
            Start-Process -FilePath $setup -ArgumentList "-i -h"
            Write-Output "‚ö†Ô∏è VB-CABLE installer launched."
          }
          Start-Service "AudioSrv"; Start-Service "AudioEndpointBuilder"
          Set-Service -Name "AudioSrv" -StartupType Automatic
          Set-Service -Name "AudioEndpointBuilder" -StartupType Automatic
          Write-Output "‚úÖ Audio services running."

      - name: Clone Loop Repository and Run loop.bat
        run: |
          git clone https://github.com/Alex15969/Loop
          cd Loop
          cmd /c loop.bat
